{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Initial library imports:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from gfunc import devel as dev\n",
      "from gfunc import maths as m\n",
      "from gfunc.scripts.gfunc_build_n_way_one2one import reset_random_edges\n",
      "from gfunc.xpermutations import xuniqueCombinations\n",
      "\n",
      "from ipy_table import *"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "bestChoose is 'choose' from 'rSeq'.\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# PTCI test settings: rpd; scale divergence weights from 1.1 to 1.5"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "PTCI is a measure of the similarity (putative conservation) of the RNA expression (abundance) profiles between orlologous genes between species.  The full score combines the r-value ($r$), it's corresponding p-value ($p$), and a scaled weight derived from the evolutionary distance of the species ($w(d)$). By default, the $w(d)$ value is scaled to between 1.0 and 1.1 so as not to overwhelm the metric. \n",
      "\n",
      "$PTCI = r \\cdot (1-p) \\cdot w(d)$\n",
      "\n",
      "However, by setting the values of a few master variables below we can explore how altering these parameters affects the results."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "master_kinds = [ ['\"rpd\"' ,   'r * (1-p) * w(d)'  ],\n",
      "                 [ '\"zpd\"' , 'z(r) * (1-p) * w(d)' ],\n",
      "                 [ '\"rd\"' , 'r * w(d)'               ],\n",
      "                 [ '\"zd\"' , 'z(r) * w(d)'             ],\n",
      "                 [  '\"r\"' ,'r'                         ],\n",
      "                 [  '\"z\"' , 'z(r)'                     ] ]\n",
      "\n",
      "table = make_table(master_kinds)\n",
      "\n",
      "print \"\\n\\n\\n\\n`master_kind` can be any of the following:\"\n",
      "display(table)\n",
      "\n",
      "print \"`master_w_min` and `master_w_max` define the bounds of the w(d) scaling function.\\n\\n\"\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n",
        "\n",
        "\n",
        "`master_kind` can be any of the following:\n"
       ]
      },
      {
       "html": [
        "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\"  style=\"border:1px solid black;border-collapse:collapse;\"><tr><td>\"rpd\"</td><td>r&nbsp*&nbsp(1-p)&nbsp*&nbspw(d)</td></tr><tr><td>\"zpd\"</td><td>z(r)&nbsp*&nbsp(1-p)&nbsp*&nbspw(d)</td></tr><tr><td>\"rd\"</td><td>r&nbsp*&nbspw(d)</td></tr><tr><td>\"zd\"</td><td>z(r)&nbsp*&nbspw(d)</td></tr><tr><td>\"r\"</td><td>r</td></tr><tr><td>\"z\"</td><td>z(r)</td></tr>"
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.HTML at 0x5de7690>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "`master_w_min` and `master_w_max` define the bounds of the w(d) scaling function.\n",
        "\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Setting the PTCI parameters:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#set the parameters of ptci to calculate\n",
      "master_kind = 'rpd'\n",
      "master_w_min = 1.1\n",
      "master_w_max = 1.5"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# 1: Analyze 1-to-1 ortholog correlations (pairwise only):"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Run external script to load expressin/divergence/etc data into the gFunc graph:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# run gfunc_build_n_way_one2one script and capture output in variable `trap`\n",
      "%run -i ../../../Dropbox/repos/git/gfunc/src/gfunc/scripts/gfunc_build_n_way_one2one.py ../../../Dropbox/common/gfunc/Aa_Ag_Cq_sort_pci.conf\n",
      "\n",
      "graphHandler,graphBuilder,n_way_ortho_table,ortho_parser = trap\n",
      "\n",
      "# extract edge data from the graphs\n",
      "edges = graphHandler.edge_dict.values() "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "main() completed.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to calculate and store the orthologous expression profile correlation values in the graph edges:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_edge_r_and_p_vals(edges,quiet=True):\n",
      "    \"\"\"\n",
      "    set and get r and p vals from list of edges\n",
      "    \"\"\"\n",
      "    # collect all the results using edge_correlation()\n",
      "    edge_r_and_p_values = [dev.edge_correlation(edge) for edge in edges]\n",
      "    \n",
      "    if not quiet:\n",
      "        print \"r_vals before cleaning: %s\" % (len(edge_r_and_p_values))\n",
      "\n",
      "    # get rid of any results that equal None\n",
      "    edge_r_and_p_values = [x for x in edge_r_and_p_values if not dev.is_none_or_nan(x)]\n",
      "    \n",
      "    if not quiet:\n",
      "        print \"Returning %s r_vals.\" % (len(edge_r_and_p_values))\n",
      "        \n",
      "    return edge_r_and_p_values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Set the expression correlation values and also store them in external variable for easy access after cleaning:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "r_and_p_values = get_edge_r_and_p_vals(edges,quiet=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "r_vals before cleaning: 18495\n",
        "Returning 16901 r_vals."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "r_values = [r_and_p_values[i][0] for i in range(len(r_and_p_values))]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Histogram of r-values:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hist(r_values,bins=50,histtype='stepfilled',cumulative=False, color='b')\n",
      "xlabel('correlation values')\n",
      "ylabel('number of edges in each bin')\n",
      "title('r values for pairwise edge comparisons')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "<matplotlib.text.Text at 0x37a77650>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n8yRYAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x5de72d0>"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Use the correlation values to calculate and store the REAL DATA z-score statistics for later:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z_stats = m.get_z_score_stats(r_values)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"mean:\\t%s\\nmedian:\\t%s\\nstdv:\\t%s\" % (z_stats[0],z_stats[1],z_stats[2])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "mean:\t0.272079182268\n",
        "median:\t0.399629810524\n",
        "stdv:\t0.573487389025\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to use z-score stats to calculate and store z-score converted r-values in the gFunc graph:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def set_z_vals(graphHandler,z_stats,use_center='median'):\n",
      "    z_stats = {'mean':z_stats[0],'median':z_stats[1],'stdv':z_stats[2]}\n",
      "    \n",
      "    center = z_stats[use_center]\n",
      "    stdv   = z_stats['stdv']\n",
      "    \n",
      "    def z_val(r_val,center,stdv):\n",
      "        return  (r_val - center) / stdv\n",
      "    \n",
      "    edges = graphHandler.edge_dict.values() \n",
      "    for edge in edges:\n",
      "        try:\n",
      "            edge.data.z_val = z_val(edge.data.r_val,center,stdv)\n",
      "            \n",
      "        except (TypeError,AttributeError) as exc:\n",
      "            if 'TypeError' in str(exc):\n",
      "                edge.data.z_val = None\n",
      "            elif 'AttributeError' in str(exc):\n",
      "                dev.edge_correlation(edge)\n",
      "                if edge.data.r_val == None:\n",
      "                    edge.data.z_val = None\n",
      "                else:\n",
      "                    edge.data.z_val = z_val(edge.data.r_val,center,stdv)\n",
      "            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "set_z_vals(graphHandler,z_stats,use_center='median')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to calculate and store the 1-to-1 pairwise PTCI values in the graph edges"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_pairwise_ptci_vals(edges,kind='rpd',quiet=True,w_min=1.0,w_max=1.1):\n",
      "    if not quiet:\n",
      "        print \"kind: %s\" % (kind)\n",
      "    pairwise_ptci_vals = [dev.get_ptci(edge,kind,w_min,w_max) for edge in edges]\n",
      "    if not quiet:\n",
      "        print \"ptci_vals before cleaning: %s\" % (len(pairwise_ptci_vals))\n",
      "    # remove any None values\n",
      "    pairwise_ptci_vals = [ptci for ptci in pairwise_ptci_vals if not dev.is_none_or_nan(ptci)]\n",
      "    if not quiet:\n",
      "        print \"Returning %s ptci_vals.\" % (len(pairwise_ptci_vals))\n",
      "        \n",
      "    return pairwise_ptci_vals"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 13
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Set and collect the REAL DATA 1-to-1 PTCIs"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pairwise_ptci_vals = get_pairwise_ptci_vals(edges,kind=master_kind,quiet=True,w_min=master_w_min,w_max=master_w_max)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to calculate and store RANDOMIZED 1-to-1 pairwise PTCI values in the graph edges to generate many NULL distributions"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_null_pairwise_ptci_distributions(graphHandler,graphBuilder,n_way_ortho_table,ortho_parser,reps=50,kind='rpd',quiet=True,w_min=1.0,w_max=1.1):\n",
      "    \"\"\"\n",
      "    \"\"\"\n",
      "    null_paired_ptci_distributions = []\n",
      "\n",
      "    for rep in range(reps):\n",
      "        # scramble edges for this rep and set new r&p vals\n",
      "        reset_random_edges(graphHandler,graphBuilder,n_way_ortho_table,ortho_parser)\n",
      "        graphHandler.measure_relations()\n",
      "        \n",
      "        # do prep\n",
      "        null_edges = graphHandler.edge_dict.values()\n",
      "        null_r_and_p_values = get_edge_r_and_p_vals(null_edges,quiet)\n",
      "        null_r_values = [null_r_and_p_values[i][0] for i in range(len(null_r_and_p_values))]\n",
      "        null_z_stats = m.get_z_score_stats(null_r_values)\n",
      "        set_z_vals(graphHandler,null_z_stats,use_center='median')\n",
      "        \n",
      "        # calculate null ptci vals\n",
      "        null_pairwise_ptci_vals = get_pairwise_ptci_vals(null_edges,kind,quiet,w_min,w_max)\n",
      "        \n",
      "        # collect null ptci distribution\n",
      "        null_paired_ptci_distributions.append(null_pairwise_ptci_vals)\n",
      "        \n",
      "    \n",
      "    return null_paired_ptci_distributions"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Set and collect the NULL DATA 1-to-1 PTCIs"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "null_pairwise_ptci_distributions = get_null_pairwise_ptci_distributions(graphHandler,\n",
      "                                                                        graphBuilder,\n",
      "                                                                        n_way_ortho_table,\n",
      "                                                                        ortho_parser,\n",
      "                                                                        reps=5,\n",
      "                                                                        kind=master_kind,\n",
      "                                                                        quiet=True,\n",
      "                                                                        w_min=master_w_min,\n",
      "                                                                        w_max=master_w_max)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Histogram overlays contrasting the REAL and NULL distributions of 1-to-1 orthologous PTCI values"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show what the actual data looks like for comparison\n",
      "hist(pairwise_ptci_vals,bins=50,histtype='stepfilled',cumulative=False, color='c',alpha=.7, label='Real Data')\n",
      "\n",
      "# Graph null distributions as grey slightly transparent histograms\n",
      "null_label = 'Null Data'\n",
      "\n",
      "for null_dist in null_pairwise_ptci_distributions:\n",
      "    hist(null_dist,bins=50,histtype='step',cumulative=False, color='k',alpha=.1,label=null_label)\n",
      "    null_label = None\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "xlabel('ptci (kind: %s, %s-%s)' % (master_kind, master_w_min, master_w_max))\n",
      "ylabel('number of edges in each bin')\n",
      "title('null distributions for pairwise edge correlations (%s reps)' % (len(null_pairwise_ptci_distributions)))\n",
      "legend()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "<matplotlib.legend.Legend at 0x39087390>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEXCAYAAAC6baP3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XlcVPX+P/DXmYVVBgZQkBkRFQwxc0elVFJB4ytqliSm\nolZu5ZK3XK+Gdks07ZoVloZLatetrmgqqSlmLpjLVa9k4ALKIio7DMNsn98fXM6PYQ4O64D4fj4e\n83jAOTOfz/vMnJn3WT4LxxhjIIQQQqpJ1NgBEEIIebpQ4iCEEFIjlDgIIYTUCCUOQgghNUKJgxBC\nSI1Q4iCEEFIjlDj+Z9KkSVi6dCkAID4+Hm3atKn2awMDAxETEwMA2LlzJ4YOHVpvcT3//PP47bff\nAACRkZGYMGFCvZW9cuVKvPPOO/VWXnWcOXMGPj4+cHBwwIEDByxad2X1tf2nT5+Gr69vPURUexX3\n3+ai4veqpu7duwcHBwdYurfBL7/8gldffdWiddbUwYMHMXbs2DqVQYnjfziOA8dxdX7tm2++iV9+\n+cXsa6r7Rf/vf/+LAQMG8PXUllAyXLRoETZt2lTrMmtj2bJlmD17NgoLCzFixAiL1l1ZfW1///79\ncfPmzXqIqPbqsv82VTXZJi8vL5w4cYL/39PTE4WFhRZ/T5YsWYJFixYZxWVnZwcHBwc4ODhg2LBh\nFo1HSGhoKG7cuIHr16/XugxKHBU0pb6QOp3OZFlTiq+27t27Bz8/v1q9Vq/X13M0VRN6/5u6prx/\nGAwGo//r+/3lOK7Rt/+PP/5AQUEB/P39+WUcx+Hnn39GYWEhCgsLERcXV+3yGnJ/Dw8Px8aNG2v9\n+maVOLy8vLB27Vp07doVTk5OGDt2LEpLSwEAW7duRf/+/Y2eLxKJcOfOnRrXc+zYMfj6+sLJyQmz\nZs0y2mEr1sMYw/vvvw83Nzc4OjrihRdewI0bN7Bx40b88MMPWL16NRwcHDBy5Eg+/tWrV+OFF16A\ng4MD9Hq90ZEUx3FQq9UYO3YsZDIZevbsiWvXrlW5PeVnNSqVCq+88goyMjLg4OAAmUyGzMxMk0tf\nBw4cQOfOnSGXy/Hyyy8bHUU/6b19/Pgxhg8fDrlcDhcXFwwYMEDwS9yhQwfcuXMHoaGhkMlk0Gq1\nyMjIwIgRI+Di4gIfHx989913/PMjIyPx+uuvY8KECXB0dMS2bdtMypw0aRKmT5+O4OBgyGQyBAYG\n4t69e/z6OXPmwNPTE46OjujVqxd+//13o/LLtz8lJQUikQibN29G27ZtMXjwYEyaNAmff/45ACA9\nPR0ikQjR0dEAgNu3b8PFxQWA6dncqlWroFQqIZPJ4Ovry39+jDFERUXB29sbrq6ueOONN5Cbm2uy\nTeV+/vlndOvWDXK5HC+++KLREeKVK1fQo0cPyGQyjB07Fmq12ui1q1evhoeHB5RKJb777jujfaO0\ntBQffPAB2rZtC3d3d8yYMcPk9RVt2rQJfn5+kMlk6Ny5M65cuQIA+PPPPxEYGAi5XI7nn38eBw8e\nNPpcZsyYgZCQELRo0QInT5402b8NBgPOnz+PgIAAyOVydOvWDadOnRKM4fbt2xg0aBBcXV3RsmVL\njB8/Hvn5+QCACRMm4N69ewgNDYWDgwPWrFnDf57lCcvcfhYWFoaIiAjIZDI8//zzuHTpktnPs7Ij\nR44gMDDQZHl1E5rQ/p6fn4+33nqL/yyXLl3Kb9PWrVvx4osvYtasWXByckKnTp2MYtu6dSs6dOgA\nmUyG9u3b44cffuDXBQYG4tChQ9WKSxBrRry8vFifPn1YZmYmy8nJYZ06dWLffPMNY4yxLVu2sJde\nesno+RzHsdu3bzPGGJs0aRL7+9//zhhj7OTJk0ypVArW8ejRI+bg4MB+/PFHptPp2D//+U8mkUhY\nTEyMST1xcXGsZ8+eLD8/nzHG2M2bN1lmZiZf39KlS43Kbtu2LevevTtLS0tjarWa36Zff/2VMcbY\nRx99xKRSKV/3mjVrWLt27ZhOpzPZnsp1xMfHm2xTZGQkGz9+PGOMsb/++ovZ29uz48ePM51Ox1av\nXs28vb2ZVqs1+94uXLiQTZ8+nel0OqbT6djvv//+xM+ofHsYY6x///7s3XffZaWlpew///kPa9my\nJTtx4oTR9sbGxjLGGCspKTEpLyIigjk4OLDTp0+z0tJSNmfOHKPPeceOHSwnJ4fp9Xq2du1a5u7u\nzkpLS022/+7du4zjOBYREcFUKhUrKSlhmzdvZqGhoYwxxnbu3Mk6dOjA3njjDcYYYzExMWzUqFGM\nMeP95ebNm6xNmzb855yamsp/JuvWrWP9+vVj6enpTKPRsGnTprHw8HDB9+ny5cusVatW7MKFC8xg\nMLBt27YxLy8vptFoWGlpKfP09GTr1q1jOp2O7du3j0mlUv6zPnLkCHN3d2eJiYlMpVKxN99802jf\n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\nBoPhEf8P9dGyXIsHW60AAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x3b7674d0>"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# 2: Analyze composite $N$-way ortholog correlations (1-to-1 orthologs in all $N$ species):"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### We need to regenrate the graph database after the randomization step above"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# run gfunc_build_n_way_one2one script and capture output in variable `trap`\n",
      "%run -i ../../../Dropbox/repos/git/gfunc/src/gfunc/scripts/gfunc_build_n_way_one2one.py ../../../Dropbox/common/gfunc/Aa_Ag_Cq_sort_pci.conf\n",
      "\n",
      "graphHandler,graphBuilder,n_way_ortho_table,ortho_parser = trap\n",
      "\n",
      "edges = graphHandler.edge_dict.values() \n",
      "r_and_p_values = get_edge_r_and_p_vals(edges,quiet=False)\n",
      "set_z_vals(graphHandler, z_stats, use_center='median')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "main() completed.\n",
        "r_vals before cleaning: 18495"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Returning 16901 r_vals."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to calculate and return the mean PTCI values for $N$-way ortholog subgraphs if and only if all edges successfully generated non-None value PTCI results."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def calc_mean_ptcis(graphHandler,n_way_ortho_table,kind='rpd',quiet=True,w_min=1.0,w_max=1.1):\n",
      "    \"\"\"\n",
      "    returns list of n-way averaged PTCI values for N-way ortholog subgraphs if and only if \n",
      "    all edges successfully generated non-None value PTCI results.\n",
      "    \"\"\"\n",
      "    \n",
      "    # dictionary of nodes/edges indexed by gene names\n",
      "    node_dict = graphHandler.node_dict\n",
      "    edge_dict = graphHandler.edge_dict\n",
      "    \n",
      "    graph = graphHandler.graph \n",
      "    \n",
      "    mean_ptcis = []\n",
      "    \n",
      "    # calculate all pairwise combinations of indexes\n",
      "    # so that each ortho-edge of n-way orthos are obtained\n",
      "    \n",
      "    index_combos = [ x for x in xuniqueCombinations(range(len(n_way_ortho_table.columns)),2)]\n",
      "    \n",
      "    \n",
      "    for node_list in n_way_ortho_table.itertuples():\n",
      "        \n",
      "        node_list = node_list[1:]\n",
      "        \n",
      "        ortho_edges = []\n",
      "        for i in index_combos:\n",
      "            key = tuple(sorted([node_list[i[0]],node_list[i[1]]]))\n",
      "            \n",
      "            try:\n",
      "                ortho_edges.append(edge_dict[key])\n",
      "            except KeyError:\n",
      "                break\n",
      "                \n",
      "        ptcis = [dev.get_ptci(edge,kind,w_min,w_max) for edge in ortho_edges]\n",
      "        \n",
      "        try:\n",
      "            mean_ptci = np.mean(ptcis)\n",
      "            mean_ptcis.append(mean_ptci)\n",
      "        except TypeError:\n",
      "            pass\n",
      "\n",
      "    return mean_ptcis\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Calulate the REAL DATA mean PTCI values"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "n_way_mean_ptcis = calc_mean_ptcis(graphHandler,n_way_ortho_table,kind=master_kind,quiet=True,w_min=master_w_min,w_max=master_w_max)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Function to calculate RANDOMIZED mean PTCI values to generate many NULL distributions"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_null_mean_ptci_distributions(graphHandler,graphBuilder,n_way_ortho_table,ortho_parser,reps=50,kind='rpd',quiet=True,w_min=1.0,w_max=1.1):\n",
      "    \"\"\"\n",
      "    \"\"\"\n",
      "    null_mean_ptci_distributions = []\n",
      "\n",
      "    for rep in range(reps):\n",
      "        # scramble edges for this rep and set new r&p vals\n",
      "        reset_random_edges(graphHandler,graphBuilder,n_way_ortho_table,ortho_parser)\n",
      "        graphHandler.measure_relations()\n",
      "        \n",
      "        \n",
      "        # do prep\n",
      "        null_edges = graphHandler.edge_dict.values()\n",
      "        null_r_and_p_values = get_edge_r_and_p_vals(null_edges,quiet)\n",
      "        null_r_values = [null_r_and_p_values[i][0] for i in range(len(null_r_and_p_values))]\n",
      "        null_z_stats = m.get_z_score_stats(null_r_values)\n",
      "        set_z_vals(graphHandler,null_z_stats,use_center='median')\n",
      "        \n",
      "        # calculate null ptci vals\n",
      "        null_mean_ptci_vals = calc_mean_ptcis(graphHandler,n_way_ortho_table,kind,quiet,w_min,w_max)\n",
      "        \n",
      "        # collect null ptci distribution\n",
      "        null_mean_ptci_distributions.append(null_mean_ptci_vals)\n",
      "        \n",
      "    \n",
      "    return null_mean_ptci_distributions"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 21
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Calculate RANDOMIZED mean PTCI values"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "null_mean_ptci_distributions = get_null_mean_ptci_distributions(graphHandler,\n",
      "                                                                graphBuilder,\n",
      "                                                                n_way_ortho_table,\n",
      "                                                                ortho_parser,\n",
      "                                                                reps=5,\n",
      "                                                                kind=master_kind,\n",
      "                                                                quiet=True,\n",
      "                                                                w_min=master_w_min,\n",
      "                                                                w_max=master_w_max)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 22
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Histogram overlays contrasting the REAL and NULL distributions of $N$-way orthologous PTCI values"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show what the actual data looks like for comparison\n",
      "hist(n_way_mean_ptcis,bins=50,histtype='stepfilled',cumulative=False, color='c',alpha=.7, label='Real Data')\n",
      "\n",
      "# Graph null distributions as grey slightly transparent histograms\n",
      "null_label = 'Null Data'\n",
      "\n",
      "for null_dist in null_mean_ptci_distributions:\n",
      "    hist(null_dist,bins=50,histtype='step',cumulative=False, color='k',alpha=.1,label=null_label)\n",
      "    null_label = None\n",
      "\n",
      "\n",
      "xlabel('ptci (kind: %s, %s-%s)' % (master_kind, master_w_min, master_w_max))\n",
      "ylabel('number of edges in each bin')\n",
      "title('null distributions for mean edge correlations (%s reps)' % (len(null_mean_ptci_distributions)))\n",
      "legend()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "<matplotlib.legend.Legend at 0x34486210>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x71b9150>"
       ]
      }
     ],
     "prompt_number": 23
    }
   ],
   "metadata": {}
  }
 ]
}